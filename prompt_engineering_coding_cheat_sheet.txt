===========================
  PROMPT ENGINEERING FOR CODING â€“ CHEAT SHEET
===========================

ðŸ“Œ 1. Write a Function
Write a [language] function that [describe the task]. 
Use clear variable names and include inline comments.

Example:
Write a Python function that takes a list of integers and returns a list of even numbers.

---

ðŸ“Œ 2. Explain Code
Explain what this code does step-by-step in simple language.
[PASTE CODE]

---

ðŸ“Œ 3. Refactor Code
Refactor this code to make it more [readable / efficient / Pythonic]. Keep the logic the same.
[PASTE CODE]

---

ðŸ“Œ 4. Convert Between Languages
Convert the following [source language] code to [target language]. Keep the structure and logic equivalent.
[PASTE CODE]

---

ðŸ“Œ 5. Debug Code
Thereâ€™s a bug in this code. Find and fix it, then explain the solution.
[PASTE CODE]

---

ðŸ“Œ 6. Write Unit Tests
Write unit tests for the following function using [pytest / unittest]. Include edge cases.
[PASTE CODE]

---

ðŸ“Œ 7. Show Alternatives
Show 2 or 3 different ways to implement [functionality] in [language]. Include pros and cons.

---

ðŸ“Œ 8. Optimize Algorithm
Optimize this function to reduce time complexity. Explain the original and new time complexities.
[PASTE CODE]

---

ðŸ“Œ 9. Explain Error
I'm getting this error: "[PASTE ERROR]". Here's the code. What does it mean and how do I fix it?
[PASTE CODE]

---

ðŸ“Œ 10. Generate Boilerplate
Generate the boilerplate code for a [framework] REST API with a GET and POST endpoint. Use best practices.

---

ðŸ’¡ BONUS: Combine Prompts with Role Instructions
You are a senior [language] developer. [Instruction].

Example:
You are a senior Python developer. Refactor the code for clarity and performance, and explain what you changed.

